date_open <- "2021-04-01" # ONLY NEEDED FOR CIRG
date_close <- "2021-06-01" # ONLY NEEDED FOR CIRG
date_cirg <- "FY21 Q3" # ONLY NEEDED FOR CIRG
input <- "C:/Users/josep/Documents/R/r_projects/Hfr"
# DATASET SOURCE: MONTHLY ECHO PREP SUBMISSION THAT ACCOMPANIES ER/DSD SUBMISSION
prep_compile <- read_excel("Data/Ajuda/PrEP/prep_compile.xlsx", .name_repair = "universal") %>%
glimpse()
ajuda_site_map <- read_excel("~/GitHub/AJUDA_Site_Map/AJUDA Site Map.xlsx") %>%
dplyr::select(orgunituid, SNU, Psnu, Sitename) %>%
dplyr::rename(psnu = Psnu,
orgunit = Sitename,
snu = SNU)
ajuda_site_map_2 <- read_excel("~/GitHub/AJUDA_Site_Map/AJUDA Site Map.xlsx") %>%
dplyr::select(-c(sisma_id, SNU, Psnu, Sitename)) %>%
dplyr::rename(partner = `IP FY20`)
em_prep_base <- prep_compile %>%
tidyr::pivot_longer(cols= !c(Site, DATIM_Code, Month), names_to = "indicator", values_to = "value") %>%
dplyr::mutate(
sex = dplyr::case_when(stringr::str_detect(indicator, "_female") ~ "Female",
stringr::str_detect(indicator, "_male") ~ "Male"),
age = dplyr::case_when(stringr::str_detect(indicator, "_15_19") ~ "15-19",
stringr::str_detect(indicator, "_20_24") ~ "20-24",
stringr::str_detect(indicator, "_25_49") ~ "25-49",
stringr::str_detect(indicator, "_50.") ~ "50+"),
poptype = dplyr::case_when(stringr::str_detect(indicator, "PWID") ~ "PWID",
stringr::str_detect(indicator, "MSM") ~ "MSM",
stringr::str_detect(indicator, "TG") ~ "TG",
stringr::str_detect(indicator, "FSW") ~ "FSW",
stringr::str_detect(indicator, "Pregnant.breastfeeding.women") ~ "P/LW",
stringr::str_detect(indicator, "SDC") ~ "Serodiscordant Couples",
stringr::str_detect(indicator, "People.in.prison.and.other.closed.settings") ~ "Prisoners etc.",
stringr::str_detect(indicator, "AGYW") ~ "AGYW",
stringr::str_detect(indicator, "Custom") ~ "Other"),
indicator_2 = dplyr::case_when(stringr::str_detect(indicator, "Number.of.clients.HIV.tested.for.PrEP.initiation") ~ "PrEP_SCREEN",
stringr::str_detect(indicator, "Number.of.clients.screened.for.initiation.testing.negative") ~ "PrEP_ELIGIBLE",
stringr::str_detect(indicator, "Number.of.clients.initiating.PrEP.for.the.first.time") ~ "PrEP_NEW_VERIFY",
stringr::str_detect(indicator, "Number.of.clients.returning.for.1.month..initial") ~ "PrEP_1MONTH",
stringr::str_detect(indicator, "Number.of.clients.returning.for.any.subsequent.follow.up.visits") ~ "PrEP_RETURN_ALL",
stringr::str_detect(indicator, "Number.of.clients.restarting.PrEP") ~ "PrEP_RESTART",
stringr::str_detect(indicator, "Number.of.seroconversions") ~ "PrEP_SEROCON"),
agecoarse = dplyr::case_when(age == "<1" ~ "<15",
age == "1-9" ~ "<15",
age == "10-14" ~ "<15"),
agecoarse = replace_na(agecoarse, "15+")
) %>%
tidyr::drop_na(indicator_2) %>%
dplyr::filter(value != 0) %>%
dplyr::select(-c(indicator)) %>%
dplyr::left_join(ajuda_site_map, c("DATIM_Code" = "orgunituid")) %>%
dplyr::select(c(date = Month,
site = orgunit,
orgunituid = DATIM_Code,
district = psnu,
province = snu,
indicator = indicator_2,
sex,
age,
agecoarse,
poptype,
value))
em_prep <- em_prep_base %>%
dplyr::group_by(date, site, orgunituid, district, province, indicator, sex, age, agecoarse, poptype) %>%
summarize_at(vars(value), sum, na.rm = TRUE) %>%
tidyr::pivot_wider(names_from = indicator, values_from = value) %>%
dplyr::left_join(ajuda_site_map_2)
# SUBSET DATAFRAME TO CREATE HFR SUBMISSION -----------------------------------------------------------------------------------
#
hfr_prep <- em_prep_base %>%
dplyr::rename(val = value) %>%
dplyr::mutate(operatingunit = "Mozambique",
mech_code = "70212",
partner = "ECHO",
otherdisaggregate = "",
indicator= dplyr::recode(indicator, "PrEP_NEW_VERIFY" = "PrEP_NEW")) %>%
dplyr::filter(!is.na(age),
indicator == "PrEP_NEW",
date == as.Date(month)) %>%
dplyr::select(c(date,
orgunit = site,
orgunituid,
mech_code,
partner,
operatingunit,
psnu = district,
indicator,
sex,
agecoarse,
otherdisaggregate,
val))
# SUBSET DATAFRAME TO CREATE CI SUBMISSION -----------------------------------------------------------------------------------
cirg_prep <- em_prep_base %>%
dplyr::filter(date >= as.Date(date_open) & date <= as.Date(date_close)) %>%
dplyr::filter(!indicator %in% "PrEP_RETURN_ALL") %>%
dplyr::rename(val = value,
reportingperiod = date,
orgunit = site,
psnu = district,
population = poptype) %>%
dplyr::mutate(operatingunit = "Mozambique",
otherdisaggregate = "",
mech_code = "70212",
partner = "ECHO",
reportingperiod = date_cirg,
numdenom = "N",
population = dplyr::recode(population,
"Serodiscordant Couples" = "Non-KP (general population)",
"AGYW" = "Non-KP (seronegative persons in serodifferent partnerships)",
"MSM" = "Men who have sex with men (MSM)",
"FSW" = "Female sex workers (FSW)"),
age = dplyr::recode(age, "25-49"= "Unknown"),
age = if_else(indicator == "PrEP_1MONTH", "Unknown", age),
sex = if_else(indicator == "PrEP_1MONTH", "Unknown", sex)
#age = dplyr::case_when(indicator == "PrEP_1MONTH" ~ "Unknown"),
#sex = dplyr::case_when(indicator == "PrEP_1MONTH" ~ "Unknown")
) %>%
dplyr::select(reportingperiod,
orgunit,
orgunituid,
mech_code,
partner,
operatingunit,
psnu,
indicator,
sex,
age,
population,
otherdisaggregate,
numdenom,
val) %>%
group_by(reportingperiod, orgunit, orgunituid, mech_code, partner, operatingunit, psnu, indicator, sex, age, population, otherdisaggregate, numdenom) %>%
summarize(val = sum(val)) %>%
ungroup()
# PRINT EXCEL DOCUMENTS TO COMPUTER -----------------------------------------------------------------------------------
#
readr::write_tsv(
em_prep,
"Dataout/em_prep.txt",
na ="")
openxlsx::write.xlsx(em_prep, file = "Dataout/em_prep.xlsx", sheetName = "em_prep")
openxlsx::write.xlsx(hfr_prep, file = "~/R/r_projects/Hfr/output/hfr_prep.xlsx", sheetName = "hfr_prep")
openxlsx::write.xlsx(cirg_prep, file = "~/R/r_projects/Hfr/output/cirg_prep.xlsx", sheetName = "cirg_prep")
em_prep_new <- em_prep_base %>%
dplyr::filter(indicator == "PrEP_NEW_VERIFY") %>%
tidyr::drop_na(poptype) %>%
dplyr::group_by(poptype, date) %>%
summarize(value = sum(value))
ggplot(em_prep_new, aes(date, value, fill = poptype)) +
geom_col() +
theme_fivethirtyeight() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.caption = element_text(size = 9),
axis.text = element_text(size = 10),
legend.position="right", legend.direction = "vertical") +
labs(title = "PrEP_NEW Trend",
caption = "Data source: ECHO Monthly PrEP Reporting")
#-----------------------------------------------------------------------------------
##  LOAD CORE TIDYVERSE & OTHER PACKAGES
library(tidyverse)
library(glamr)
library(janitor)
library(readxl)
library(openxlsx)
library(glue)
rm(list(ls))
rm(list = ls())
#---- DEFINE MONTH AND LOAD DATASETS - NEEDS UPDATING EVERY MONTH! --------------------------
month <- "2021-06-20" # UPDATE
monthly_dataset <- ("Data/Ajuda/ER_DSD_TPT/_CompileHistoric/TPT_2021_06.csv") #
#---- DEFINE MONTH AND LOAD DATASETS - NEEDS UPDATING EVERY MONTH! --------------------------
month <- "2021-06-20" # UPDATE
monthly_dataset <- ("Data/Ajuda/ER_DSD_TPT/_CompileHistoric/TPT_2021_06.csv") #
ARIEL <- "Data/Ajuda/ER_DSD_TPT/2021_05/Ariel_July_2021 (Retention Template).xlsx"
#-----------------------------------------------------------------------------------
##  LOAD CORE TIDYVERSE & OTHER PACKAGES
library(tidyverse)
library(glamr)
library(janitor)
library(readxl)
library(openxlsx)
library(glue)
# rm(list = ls())
month <- "2021-06-20" # UPDATE
monthly_dataset <- ("Data/Ajuda/ER_DSD_TPT/_CompileHistoric/TPT_2021_06.csv") # PATH AND NAME OF MONTHLY DATASET BEING PROCESSED AND SAVED TO DISK
ARIEL <- "Data/Ajuda/ER_DSD_TPT/2021_05/Ariel_July_2021 (Retention Template).xlsx"
ARIEL <- "Data/Ajuda/ER_DSD_TPT/2021_05/Ariel_July_2021 (Retention Template).xlsx"
CCS <- "Data/Ajuda/ER_DSD_TPT/2021_05/CCS_Jun_2021 (Retention Template).xlsx"
ECHO <- "Data/Ajuda/ER_DSD_TPT/2021_05/PartnerName_Jul_2021 (Retention Template)_ECHO.xlsx"
EGPAF <- "Data/Ajuda/ER_DSD_TPT/2021_05/EGPAF_Jun_2021 (Retention Template)_05 07 2021.xlsx"
ICAP <- "Data/Ajuda/ER_DSD_TPT/2021_05/ICAP_Junho_2021 (Retention Template) 05072021.xlsx"
FGH <- "Data/Ajuda/ER_DSD_TPT/2021_05/FGH_Jun_2021 (Retention Template) (003).xlsx"
ajuda_site_map <- read_excel("~/GitHub/AJUDA_Site_Map/Dataout/ajuda_site_map_144.xlsx") %>%
select(-c(sisma_id,
SNU,
Psnu,
Sitename,
`IP FY20`,
ajuda,
ajuda_phase)) %>%
dplyr::mutate(conflict = replace_na(conflict, 0),
corridor = replace_na(corridor, 0))
historic_files_path <- "Data/Ajuda/ER_DSD_TPT/_CompileHistoric/"  # PATH USED TO CREATE A LIST OF ALL .CSV FILES PREVIOUSLY CREATED
data_path <- "Data/Ajuda/ER_DSD_TPT/_CompileHistoric/
historic_dataset <- ("Dataout/em_tpt_interagency.txt")  # PATH AND NAME OF COMPILED INTER-AGENCY DATASET THAT IS SHARED WITH CDC EVERY MONTH
historic_dataset_usaid <- ("Dataout/em_tpt.txt")  # PATH AND NAME OF COMPILED USAID DATASET FOR USE IN TABLEAU DASHBOARD.  THE ONLY DIFFERENCE BETWEEN THIS AND ABOVE INTERAGENCY IS THE JOIN OF AJUDA SITE MAP
echo <- read_excel({ECHO}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
month <- "2021-06-20" # UPDATE
monthly_dataset <- ("Data/Ajuda/ER_DSD_TPT/_CompileHistoric/TPT_2021_06.csv") # PATH AND NAME OF MONTHLY DATASET BEING PROCESSED AND SAVED TO DISK
ARIEL <- "Data/Ajuda/ER_DSD_TPT/2021_06/Ariel_July_2021 (Retention Template).xlsx"
CCS <- "Data/Ajuda/ER_DSD_TPT/2021_06/CCS_Jun_2021 (Retention Template).xlsx"
ECHO <- "Data/Ajuda/ER_DSD_TPT/2021_06/PartnerName_Jul_2021 (Retention Template)_ECHO.xlsx"
EGPAF <- "Data/Ajuda/ER_DSD_TPT/2021_06/EGPAF_Jun_2021 (Retention Template)_05 07 2021.xlsx"
ICAP <- "Data/Ajuda/ER_DSD_TPT/2021_06/ICAP_Junho_2021 (Retention Template) 05072021.xlsx"
FGH <- "Data/Ajuda/ER_DSD_TPT/2021_06/FGH_Jun_2021 (Retention Template) (003).xlsx"
#---- DEFINE PATHS AND OUTPUT NAMES - DOES NOT NEED UPDATING --------------------------------
ajuda_site_map <- read_excel("~/GitHub/AJUDA_Site_Map/Dataout/ajuda_site_map_144.xlsx") %>%
select(-c(sisma_id,
SNU,
Psnu,
Sitename,
`IP FY20`,
ajuda,
ajuda_phase)) %>%
dplyr::mutate(conflict = replace_na(conflict, 0),
corridor = replace_na(corridor, 0))
historic_files_path <- "Data/Ajuda/ER_DSD_TPT/_CompileHistoric/"  # PATH USED TO CREATE A LIST OF ALL .CSV FILES PREVIOUSLY CREATED
data_path <- "Data/Ajuda/ER_DSD_TPT/_CompileHistoric/"  # PATH USED IN SPECIFIC CODE TO COMPILE THE ABOVE LIST OF .CSV FILES
historic_dataset <- ("Dataout/em_tpt_interagency.txt")  # PATH AND NAME OF COMPILED INTER-AGENCY DATASET THAT IS SHARED WITH CDC EVERY MONTH
historic_dataset_usaid <- ("Dataout/em_tpt.txt")  # PATH AND NAME OF COMPILED USAID DATASET FOR USE IN TABLEAU DASHBOARD.  THE ONLY DIFFERENCE BETWEEN THIS AND ABOVE INTERAGENCY IS THE JOIN OF AJUDA SITE MAP
echo <- read_excel({ECHO}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
ariel <- read_excel({ARIEL}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
ccs <- read_excel({CCS}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
egpaf <- read_excel({EGPAF}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
fgh <- read_excel({FGH}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
icap <- read_excel({ICAP}, sheet = "TB", skip = 7) %>%
dplyr::select(c(No,
Partner,
Province,
District,
`Health Facility`,
DATIM_code,
SISMA_code,
Type,
Period,
TX_CURR,
TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init)) %>%
filter(across(c(TX_CURR_TPT_Com,
TX_CURR_TPT_Not_Comp,
TX_CURR_TB_tto,
TX_CURR_TPT_Not_Comp_POS_Screen,
TX_CURR_Eleg_TPT_Comp,
TX_CURR_W_TPT_last7Mo,
TX_CURR_Eleg_TPT_Init), ~ !is.na(.x)))
tpt <- dplyr::bind_rows(ariel, ccs, echo, egpaf, fgh, icap)
rm(ariel, ccs, echo, egpaf, fgh, icap)
tpt_tidy <- tpt %>%
dplyr::mutate(TPT_candidates = TX_CURR - (TX_CURR_TPT_Com + TX_CURR_W_TPT_last7Mo) - (TX_CURR_TB_tto + TX_CURR_TPT_Not_Comp_POS_Screen),
TPT_ineligible = TX_CURR_TB_tto + TX_CURR_TPT_Not_Comp_POS_Screen) %>%
tidyr::pivot_longer(TX_CURR:TPT_ineligible, names_to = "attribute", values_to = "value") %>%
dplyr::mutate(indicator = attribute) %>%
dplyr::mutate(indicator = dplyr::recode(indicator,
"TX_CURR_W_TPT_last7Mo"= "Actively on TPT",
"TX_CURR_TB_tto" = "Recent Active TB TX",
"TX_CURR_TPT_Not_Comp_POS_Screen" = "Recent Pos TB Screen",
"TX_CURR_TPT_Com" = "TPT Completed",
"TPT_candidates" = "TPT Candidates",
"TPT_ineligible" = "TPT Ineligible",
"TX_CURR_TPT_Not_Comp" = "TPT Not Comp"),
Period = {month}
) %>%
dplyr::filter(!indicator %in% c("TX_CURR_Eleg_TPT_Init", "TX_CURR_Eleg_TPT_Comp")) %>%
dplyr::select(-c(No))
readr::write_csv(
tpt_tidy,
{monthly_dataset})
historic_files <- dir({historic_files_path}, pattern = "*.csv")  # PATH FOR PURR TO FIND MONTHLY FILES TO COMPILE
tpt_tidy_history <- historic_files %>%
map(~ read_csv(file.path(data_path, .))) %>%
reduce(rbind)
tpt_tidy_history_usaid <- tpt_tidy_history %>%
dplyr::left_join(ajuda_site_map, by = c("DATIM_code" = "orgunituid")) %>%
dplyr::rename(orgunituid = DATIM_code,
Site = `Health Facility`)
readr::write_tsv(
tpt_tidy_history,
{historic_dataset})
readr::write_tsv(
tpt_tidy_history_usaid,
{historic_dataset_usaid})
df0 <- read_excel("Data/Ajuda/ERDSD/AJUDA_Transformed_July12.xlsx",
sheet = "Jan_Jun2021",
col_types = c("text", "text", "text", "text", "text", "text", "numeric", "text", "numeric", "text", "numeric", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "numeric"))
df1 <- read_excel("Data/Ajuda/ERDSD/AJUDA_NewStructure_Mar16_Revised.xlsx",
sheet = "Aug_Dec2020",
col_types = c("text", "text", "text", "text", "text", "text", "numeric", "text", "numeric", "text", "numeric", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "numeric"))
df2 <- read_excel("Data/Ajuda/ERDSD/AJUDA_NewStructure_Mar16_Revised.xlsx",
sheet = "Feb_Jul2020",
col_types = c("text", "text", "text", "text", "text", "text", "numeric", "text", "numeric", "text", "numeric", "text", "text", "text", "text", "text", "text", "text", "text", "text", "text", "numeric"))
AJUDA_Site_Map <- read_excel("~/GitHub/AJUDA_Site_Map/Dataout/ajuda_site_map_144.xlsx") %>%
dplyr::select(-c(SNU, Psnu, Sitename, em_wave))
em_erdsd <- ("Dataout/em_erdsd.txt")
df <- dplyr::bind_rows(df0, df1, df2)
df <- df %>% mutate(Date = excel_numeric_to_date(Months, date_system = "modern")) %>%
dplyr::rename(Orgunituid = DATIM_code,
Site = `Health Facility`)
df_tidy <- df %>%
tidyr::pivot_wider(names_from = Indicator, values_from = Value, values_fill = NULL) %>%
dplyr::mutate(TX_NET_NEW = TX_CURR - Previous_TX_CURR,
ER1Month_N = case_when(!PatientType == "Total" & NumDen == "Numerator" ~ ER1Month),
ER1Month_D = case_when(!PatientType == "Total" & NumDen == "Denominator" ~ ER1Month),
ER1Month_Retained = case_when(!PatientType == "Total" & ER_Status == "Retained" ~ ER1Month),
ER1Month_TransferredOut = case_when(!PatientType == "Total" & ER_Status == "TransferredOut" ~ ER1Month),
ER4Month_N = case_when(!PatientType == "Total" & NumDen == "Numerator" ~ ER4Month),
ER4Month_D = case_when(!PatientType == "Total" & NumDen == "Denominator" ~ ER4Month),
ER4Month_Retained = case_when(!PatientType == "Total" & ER_Status == "Retained" ~ ER4Month),
ER4Month_TransferredOut = case_when(!PatientType == "Total" & ER_Status == "TransferredOut" ~ ER4Month),
ER4Month_LTFU = case_when(!PatientType == "Total" & ER_Status == "LTFU" ~ ER4Month),
IMER1_N = case_when(!PatientType == "Total" & NumDen == "Numerator" ~ IMER1),
IMER1_D = case_when(!PatientType == "Total" & NumDen == "Denominator" ~ IMER1),
IMER1B_N = case_when(!PatientType == "Total" & NumDen == "Numerator" ~ IMER1B),
IMER1B_D = case_when(!PatientType == "Total" & NumDen == "Denominator" ~ IMER1B),
TX_CURR_KP = case_when(PatientType == "KeyPop" ~ TX_CURR),
TX_NEW_KP = case_when(PatientType == "KeyPop" ~ TX_NEW),
TX_CURR_2 = case_when(!PatientType == "KeyPop" & !PatientType == "Total" ~ TX_CURR),
TX_NEW_2 = case_when(!PatientType == "KeyPop" & !PatientType == "Total" ~ TX_NEW)) %>%
dplyr::left_join(AJUDA_Site_Map, by = c("Orgunituid" = "orgunituid")) %>%
dplyr::select(-c(SISMA_code, Period, `IP FY20`, Type, ajuda, ajuda_phase, Months, `Source.Name`, HF_Export, province_HF, IMER1, IMER1B, ER1Month, ER4Month, TX_CURR, TX_NEW)) %>%
dplyr::rename(TX_CURR = TX_CURR_2,
TX_NEW = TX_NEW_2) %>%
dplyr::filter(!PatientType == "Total") %>%
dplyr::relocate(Date, .before = 1) %>%
dplyr::relocate(sisma_id, Lat, Long, .before = 7) %>%
dplyr::relocate(emr, epts, idart, disa, conflict, corridor, ovc, ycm, pmtct_pda, .before = 10)
write_tsv(
df_tidy,
{em_erdsd})
df_tidy %>%
ggplot(aes(x = Date, y = TX_CURR, color = Partner)) +
geom_col() +
labs(title = "TX_CURR Trend by Partner",
subtitle = "Historical Trend of Patients on ART in Mozambique by PEPFAR Partner",
color = "Partner") +
theme_solarized() +
theme(axis.title = element_text())
ggplot(data = df_tidy) +
geom_col(
mapping = aes(x = Date, y = TX_CURR, color = Partner)
) +
labs(title = "TX_CURR Trend by Partner",
subtitle = "Historical Trend of Patients on ART in Mozambique by PEPFAR Partner",
color = "Partner") +
theme_solarized() +
theme(axis.title = element_text())
library(ggthemes)
df_tidy %>%
ggplot(aes(x = Date, y = TX_CURR, color = Partner)) +
geom_col() +
labs(title = "TX_CURR Trend by Partner",
subtitle = "Historical Trend of Patients on ART in Mozambique by PEPFAR Partner",
color = "Partner") +
theme_solarized() +
theme(axis.title = element_text())
library(scales)
